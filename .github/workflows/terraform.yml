name: Guest List Terraform Deploy (Dev Only)

on:
  push:
    branches: [gili-feature]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '**.yml'
      - '**.yaml'
      - '.github/workflows/**'
  pull_request:
    branches: [gili-feature]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '**.yml'
      - '**.yaml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options: [plan, apply, destroy]

env:
  TF_VERSION: "1.9.8"
  TF_LOG: INFO
  TF_IN_AUTOMATION: true

  # Region
  AWS_DEFAULT_REGION: us-east-1

  # Remote state (S3 backend) configuration
  TF_STATE_BUCKET: guestlist-tfstate-bucket
  TF_STATE_KEY: guestlist/dev/terraform.tfstate   # adjust the key path per repo/env if you want
  TF_LOCK_TABLE: terraform-locks                  # DynamoDB lock table name

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Debug AWS Credentials Inputs
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "AWS_ACCESS_KEY_ID is missing"
          else
            echo "AWS_ACCESS_KEY_ID is set"
          fi

      - name: Configure AWS Credentials (Dev)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Detect Terraform Directory
        id: find-dir
        run: |
          if [ -f "./main.tf" ]; then
            echo "dir=." >> $GITHUB_OUTPUT
          elif [ -f "./terraform/main.tf" ]; then
            echo "dir=terraform" >> $GITHUB_OUTPUT
          elif [ -f "./infrastructure/main.tf" ]; then
            echo "dir=infrastructure" >> $GITHUB_OUTPUT
          else
            tfdir=$(find . -name "*.tf" -type f -exec dirname {} \; | head -1)
            if [ -z "$tfdir" ]; then
              tfdir="."
            fi
            echo "dir=$tfdir" >> $GITHUB_OUTPUT
          fi

      - name: Ensure S3 bucket and DynamoDB table exist (idempotent)
        shell: bash
        run: |
          set -euo pipefail

          # Create S3 bucket if missing
          if ! aws s3api head-bucket --bucket "$TF_STATE_BUCKET" 2>/dev/null; then
            echo "Creating S3 bucket: $TF_STATE_BUCKET in $AWS_DEFAULT_REGION"
            if [ "$AWS_DEFAULT_REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$TF_STATE_BUCKET" --region "$AWS_DEFAULT_REGION"
            else
              aws s3api create-bucket --bucket "$TF_STATE_BUCKET" --region "$AWS_DEFAULT_REGION" \
                --create-bucket-configuration LocationConstraint="$AWS_DEFAULT_REGION"
            fi
            # Best practices: versioning, encryption, block public access
            aws s3api put-bucket-versioning --bucket "$TF_STATE_BUCKET" --versioning-configuration Status=Enabled
            aws s3api put-public-access-block --bucket "$TF_STATE_BUCKET" \
              --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
            aws s3api put-bucket-encryption --bucket "$TF_STATE_BUCKET" \
              --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          else
            echo "S3 bucket $TF_STATE_BUCKET already exists"
          fi

          # Create DynamoDB lock table if missing
          if ! aws dynamodb describe-table --table-name "$TF_LOCK_TABLE" >/dev/null 2>&1; then
            echo "Creating DynamoDB table: $TF_LOCK_TABLE"
            aws dynamodb create-table \
              --table-name "$TF_LOCK_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "$AWS_DEFAULT_REGION"
            aws dynamodb wait table-exists --table-name "$TF_LOCK_TABLE" --region "$AWS_DEFAULT_REGION"
          else
            echo "DynamoDB table $TF_LOCK_TABLE already exists"
          fi

      - name: Terraform Init (S3 backend)
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: |
          terraform init -input=false -reconfigure \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${TF_STATE_KEY}" \
            -backend-config="region=${AWS_DEFAULT_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

      - name: Terraform State List
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: terraform state list || true

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan' || github.event_name != 'workflow_dispatch'
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: |
          if [ -f "dev.tfvars" ]; then
            terraform plan -var-file="dev.tfvars" -var="aws_region=${AWS_DEFAULT_REGION}" -out=tfplan-dev -no-color
          else
            terraform plan -var="environment=dev" -var="aws_region=${AWS_DEFAULT_REGION}" -out=tfplan-dev -no-color
          fi

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: |
          if [ -f "tfplan-dev" ]; then
            terraform apply "tfplan-dev"
          elif [ -f "dev.tfvars" ]; then
            terraform apply -var-file="dev.tfvars" -var="aws_region=${AWS_DEFAULT_REGION}" -auto-approve
          else
            terraform apply -var="environment=dev" -var="aws_region=${AWS_DEFAULT_REGION}" -auto-approve
          fi

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: |
          if [ -f "dev.tfvars" ]; then
            terraform destroy -var-file="dev.tfvars" -var="aws_region=${AWS_DEFAULT_REGION}" -auto-approve
          else
            terraform destroy -var="environment=dev" -var="aws_region=${AWS_DEFAULT_REGION}" -auto-approve
          fi
