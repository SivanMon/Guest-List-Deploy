name: Guest List Terraform Deploy (Multi-Environment)

on:
  push:
    branches: 
      - '*-feature'  # Matches any student-feature branch
      - dev
      - staging
      - main
    paths:
      - '**.tf'
      - '**.tfvars'
      - '**.yml'
      - '**.yaml'
      - '.github/workflows/**'
  pull_request:
    branches: 
      - '*-feature'
      - dev
      - staging
      - main
    paths:
      - '**.tf'
      - '**.tfvars'
      - '**.yml'
      - '**.yaml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (leave empty to auto-detect from branch)'
        required: false
        type: choice
        options: 
          - ''  # Empty option for auto-detection
          - gili
          - sivan
          - sahar
          - dvir
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options: [init, plan, apply, destroy]
      branch:
        description: 'Branch to deploy from (leave empty to use current branch)'
        required: false
        type: string

env:
  TF_VERSION: "1.9.8"
  TF_LOG: INFO
  TF_IN_AUTOMATION: true
  AWS_DEFAULT_REGION: us-east-1

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      workspace: ${{ steps.set-env.outputs.workspace }}
      branch: ${{ steps.set-env.outputs.branch }}
    steps:
      - name: Determine Environment
        id: set-env
        run: |
          # Function to map branch to environment
          map_branch_to_env() {
            local branch=$1
            case "$branch" in
              gili-feature)
                echo "gili"
                ;;
              sivan-feature)
                echo "sivan"
                ;;
              sahar-feature)
                echo "sahar"
                ;;
              dvir-feature)
                echo "dvir"
                ;;
              dev)
                echo "dev"
                ;;
              staging)
                echo "staging"
                ;;
              main)
                echo "prod"
                ;;
              *)
                echo "dev"
                ;;
            esac
          }
          
          # Determine which branch we're working with
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # For manual dispatch, use the branch input if provided
            if [ -n "${{ github.event.inputs.branch }}" ]; then
              working_branch="${{ github.event.inputs.branch }}"
              echo "Using branch from input: $working_branch"
            else
              working_branch="${{ github.ref_name }}"
              echo "Using current branch: $working_branch"
            fi
          else
            # For push/PR events, use the ref name
            working_branch="${{ github.ref_name }}"
            echo "Using triggered branch: $working_branch"
          fi
          
          # Determine environment
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.environment }}" ]; then
            # Use explicitly selected environment
            environment="${{ github.event.inputs.environment }}"
            echo "Using explicitly selected environment: $environment"
          else
            # Auto-detect from branch
            environment=$(map_branch_to_env "$working_branch")
            echo "Auto-detected environment from branch '$working_branch': $environment"
          fi
          
          # Set outputs
          echo "environment=$environment" >> $GITHUB_OUTPUT
          echo "workspace=$environment" >> $GITHUB_OUTPUT
          echo "branch=$working_branch" >> $GITHUB_OUTPUT
          
          # Summary
          echo "========================================="
          echo "Event Type: ${{ github.event_name }}"
          echo "Branch Input: ${{ github.event.inputs.branch }}"
          echo "Environment Input: ${{ github.event.inputs.environment }}"
          echo "Current Ref: ${{ github.ref_name }}"
          echo "========================================="
          echo "Selected Branch: $working_branch"
          echo "Selected Environment: $environment"
          echo "========================================="

  terraform:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    env:
      # Dynamic environment-specific variables
      TF_STATE_BUCKET: guestlist-tfstate-${{ needs.determine-environment.outputs.environment }}
      TF_LOCK_TABLE: terraform-locks-${{ needs.determine-environment.outputs.environment }}
      CLUSTER_ROLE_NAME: guestlist-cluster-${{ needs.determine-environment.outputs.environment }}-role
      NODE_ROLE_NAME: guestlist-node-${{ needs.determine-environment.outputs.environment }}-role

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-environment.outputs.branch }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Display Environment Info
        run: |
          echo "Deploying to environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "Using workspace: ${{ needs.determine-environment.outputs.workspace }}"
          echo "Branch: ${{ needs.determine-environment.outputs.branch }}"
          echo "State bucket: ${{ env.TF_STATE_BUCKET }}"
          echo "Lock table: ${{ env.TF_LOCK_TABLE }}"

      # Detect existing IAM roles and S3 bucket and export TF_VAR_* for Terraform
      - name: Detect existing resources and export TF_VAR_*
        shell: bash
        run: |
          set -euo pipefail

          cluster_role="${CLUSTER_ROLE_NAME}"
          node_role="${NODE_ROLE_NAME}"
          bucket="${TF_STATE_BUCKET}"
          region="${AWS_DEFAULT_REGION}"
          lock_table="${TF_LOCK_TABLE}"
          environment="${{ needs.determine-environment.outputs.environment }}"

          # Default values
          manage_iam=false
          create_state_backend=false

          # Check IAM roles
          if aws iam get-role --role-name "$cluster_role" >/dev/null 2>&1 && \
             aws iam get-role --role-name "$node_role" >/dev/null 2>&1; then
            echo "Found existing IAM roles: $cluster_role, $node_role"
            manage_iam=false
          else
            echo "One or both IAM roles are missing; Terraform will create them"
            manage_iam=true
          fi

          # Check backend bucket; if missing, create it here
          if aws s3api head-bucket --bucket "$bucket" >/dev/null 2>&1; then
            echo "Found existing S3 bucket: $bucket"
          else
            echo "Creating S3 bucket: $bucket in $region"
            if [ "$region" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$bucket" --region "$region"
            else
              aws s3api create-bucket --bucket "$bucket" --region "$region" \
                --create-bucket-configuration LocationConstraint="$region"
            fi
            
            # Add tags to identify the environment
            aws s3api put-bucket-tagging --bucket "$bucket" \
              --tagging "TagSet=[{Key=Environment,Value=$environment},{Key=ManagedBy,Value=Terraform}]"
            
            aws s3api put-bucket-versioning --bucket "$bucket" \
              --versioning-configuration Status=Enabled
            aws s3api put-public-access-block --bucket "$bucket" \
              --public-access-block-configuration \
              BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
            aws s3api put-bucket-encryption --bucket "$bucket" \
              --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          fi

          # Ensure DynamoDB lock table
          if aws dynamodb describe-table --table-name "$lock_table" >/dev/null 2>&1; then
            echo "Found existing DynamoDB table: $lock_table"
          else
            echo "Creating DynamoDB table: $lock_table"
            aws dynamodb create-table \
              --table-name "$lock_table" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --tags Key=Environment,Value="$environment" Key=ManagedBy,Value=Terraform \
              --region "$region"
            aws dynamodb wait table-exists --table-name "$lock_table" --region "$region"
          fi

          # Export TF_VAR_* so Terraform picks them up
          echo "TF_VAR_manage_iam=$manage_iam" >> "$GITHUB_ENV"
          echo "TF_VAR_cluster_role_name=$cluster_role" >> "$GITHUB_ENV"
          echo "TF_VAR_node_group_role_name=$node_role" >> "$GITHUB_ENV"
          echo "TF_VAR_create_state_backend=$create_state_backend" >> "$GITHUB_ENV"
          echo "TF_VAR_state_bucket_name=$bucket" >> "$GITHUB_ENV"
          echo "TF_VAR_lock_table_name=$lock_table" >> "$GITHUB_ENV"
          echo "TF_VAR_aws_region=$region" >> "$GITHUB_ENV"
          echo "TF_VAR_environment=$environment" >> "$GITHUB_ENV"

      # Optional: cache Terraform providers to speed up plan
      - name: Enable TF plugin cache env
        run: echo "TF_PLUGIN_CACHE_DIR=${{ runner.temp }}/.terraform-plugin-cache" >> $GITHUB_ENV

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.terraform-plugin-cache
          key: ${{ runner.os }}-tfplugins-${{ needs.determine-environment.outputs.environment }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tfplugins-${{ needs.determine-environment.outputs.environment }}-
            ${{ runner.os }}-tfplugins-

      - name: Detect Terraform Directory
        id: find-dir
        run: |
          if [ -f "./main.tf" ]; then
            echo "dir=." >> $GITHUB_OUTPUT
          elif [ -f "./terraform/main.tf" ]; then
            echo "dir=terraform" >> $GITHUB_OUTPUT
          elif [ -f "./infrastructure/main.tf" ]; then
            echo "dir=infrastructure" >> $GITHUB_OUTPUT
          else
            tfdir=$(find . -name "*.tf" -type f -exec dirname {} \; | head -1)
            echo "dir=${tfdir:-.}" >> $GITHUB_OUTPUT
          fi
          echo "Terraform directory: $(cat $GITHUB_OUTPUT | grep dir | cut -d= -f2)"

      - name: Terraform Init
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: |
          terraform init -input=false -reconfigure \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${{ env.AWS_DEFAULT_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}"

      - name: Select/Create workspace
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: |
          workspace="${{ needs.determine-environment.outputs.workspace }}"
          terraform workspace select "$workspace" 2>/dev/null || terraform workspace new "$workspace"
          echo "Active workspace: $(terraform workspace show)"

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan' || github.event_name != 'workflow_dispatch'
        timeout-minutes: 10
        working-directory: ${{ steps.find-dir.outputs.dir }}
        env:
          AWS_RETRY_MODE: adaptive
          AWS_MAX_ATTEMPTS: "5"
        run: |
          set -e
          PLAN_FLAGS="-lock-timeout=60s -parallelism=7 -no-color -input=false -refresh=false"
          environment="${{ needs.determine-environment.outputs.environment }}"
          
          # Look for environment-specific tfvars file
          if [ -f "${environment}.tfvars" ]; then
            echo "Using ${environment}.tfvars"
            terraform plan $PLAN_FLAGS -var-file="${environment}.tfvars" -out=tfplan-${environment}
          elif [ -f "environments/${environment}.tfvars" ]; then
            echo "Using environments/${environment}.tfvars"
            terraform plan $PLAN_FLAGS -var-file="environments/${environment}.tfvars" -out=tfplan-${environment}
          else
            echo "Using default variables with environment=${environment} and region=${AWS_DEFAULT_REGION}"
            terraform plan $PLAN_FLAGS \
              -var="environment=${environment}" \
              -var="region=${AWS_DEFAULT_REGION}" \
              -out=tfplan-${environment}
          fi

      - name: Upload Plan
        if: github.event.inputs.action == 'plan' || github.event_name != 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ needs.determine-environment.outputs.environment }}
          path: ${{ steps.find-dir.outputs.dir }}/tfplan-${{ needs.determine-environment.outputs.environment }}
          retention-days: 7

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: |
          environment="${{ needs.determine-environment.outputs.environment }}"
          
          if [ -f "tfplan-${environment}" ]; then
            echo "Applying existing plan"
            terraform apply -auto-approve "tfplan-${environment}"
          elif [ -f "${environment}.tfvars" ]; then
            echo "Applying with ${environment}.tfvars"
            terraform apply -auto-approve -var-file="${environment}.tfvars"
          elif [ -f "environments/${environment}.tfvars" ]; then
            echo "Applying with environments/${environment}.tfvars"
            terraform apply -auto-approve -var-file="environments/${environment}.tfvars"
          else
            echo "Applying with default variables"
            terraform apply -auto-approve \
              -var="environment=${environment}" \
              -var="region=${AWS_DEFAULT_REGION}"
          fi

      - name: Show LB URL and health check
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        working-directory: ${{ steps.find-dir.outputs.dir }}
        shell: bash
        run: |
          set -euo pipefail
          LB_HOST=$(terraform output -raw load_balancer_ip 2>/dev/null || echo "")
          if [ -z "$LB_HOST" ]; then
            echo "WARNING: Failed to read Terraform output 'load_balancer_ip'."
            echo "This might be expected if your Terraform configuration doesn't output this value."
            exit 0
          fi
          URL="http://${LB_HOST}:9999/"
          echo "Load Balancer URL: ${URL}"
          
          ATTEMPTS=30
          SLEEP=10
          for i in $(seq 1 $ATTEMPTS); do
            CODE=$(curl -sS -o /dev/null -w "%{http_code}" "$URL" || echo "000")
            if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 400 ]; then
              echo "OK: HTTP $CODE from $URL"
              exit 0
            fi
            echo "Attempt $i/$ATTEMPTS: HTTP $CODE - retrying in ${SLEEP}s..."
            sleep $SLEEP
          done
          echo "ERROR: Service not healthy after $((ATTEMPTS*SLEEP)) seconds at $URL"
          exit 1

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: |
          environment="${{ needs.determine-environment.outputs.environment }}"
          
          echo "WARNING: Destroying infrastructure for environment: ${environment}"
          
          if [ -f "${environment}.tfvars" ]; then
            terraform destroy -auto-approve -var-file="${environment}.tfvars"
          elif [ -f "environments/${environment}.tfvars" ]; then
            terraform destroy -auto-approve -var-file="environments/${environment}.tfvars"
          else
            terraform destroy -auto-approve \
              -var="environment=${environment}" \
              -var="region=${AWS_DEFAULT_REGION}"
          fi

      - name: Output Summary
        if: always()
        run: |
          echo "## Deployment Summary"
          echo "- Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "- Workspace: ${{ needs.determine-environment.outputs.workspace }}"
          echo "- Branch: ${{ needs.determine-environment.outputs.branch }}"
          echo "- Action: ${{ github.event.inputs.action || 'plan' }}"
          echo "- State Bucket: ${{ env.TF_STATE_BUCKET }}"
          echo "- Lock Table: ${{ env.TF_LOCK_TABLE }}"
