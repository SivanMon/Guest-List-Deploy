name: Guest List Clean Terraform (Deploy)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: Choose action
        required: true
        type: choice
        options: [plan, apply, destroy]
        default: plan
      environment:
        description: Target environment
        required: true
        type: choice
        options: [sivan, dvir, sahar, gili, dev, staging, main]
        default: dev
      namespace:
        description: Kubernetes namespace
        required: true
        type: string
        default: guestlist

jobs:
  tf:
    runs-on: ubuntu-latest
    env:
      TF_VERSION: '1.9.8'
      TF_CLI_ARGS: -no-color
      AWS_REGION: us-east-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Compute ENV + backend names exactly once
      - name: Set computed env values
        id: setenv
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "push" ]; then
            ENVIRONMENT="main"
            NAMESPACE="${{ github.event.inputs.namespace || 'guestlist' }}"
          else
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            NAMESPACE="${{ github.event.inputs.namespace }}"
          fi

          case "$ENVIRONMENT" in
            sivan|dvir|sahar|gili)
              TF_STATE_BUCKET="guestlist-tfstate-${ENVIRONMENT}-feature"
              ;;
            *)
              TF_STATE_BUCKET="guestlist-tfstate-${ENVIRONMENT}"
              ;;
          esac
          TF_STATE_KEY="envs/${ENVIRONMENT}/terraform.tfstate"

          {
            echo "ENVIRONMENT=$ENVIRONMENT"
            echo "NAMESPACE=$NAMESPACE"
            echo "TF_STATE_BUCKET=$TF_STATE_BUCKET"
            echo "TF_STATE_KEY=$TF_STATE_KEY"
          } >> "$GITHUB_ENV"

      - name: Debug AWS Credentials Inputs
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "AWS_ACCESS_KEY_ID is missing"
          else
            echo "AWS_ACCESS_KEY_ID is set"
          fi          

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          output-env-credentials: true


      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: true

      - name: Terraform Init
        run: |
          terraform init -input=false -reconfigure \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${TF_STATE_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=terraform-locks"

      # --------- ONLY CHANGE NEEDED FOR IMAGES ----------
      # Resolve the correct image tag from Docker Hub by environment
      - name: Resolve image tag from Docker Hub
        id: image
        run: |
          set -euo pipefail
          ENV="${ENVIRONMENT}"
          REPO="giligalili/guestlistapi"

          # Public query (no login); newest first page is enough
          JSON="$(curl -s "https://hub.docker.com/v2/repositories/${REPO}/tags?page_size=100")" || JSON="{}"

          python - "$ENV" <<'PY' > /tmp/tag.txt
          import sys, json
          env=sys.argv[1].strip().lower()
          try:
            data=json.loads("""%s""" % """$JSON""")
          except Exception:
            data={"results":[]}
          results=sorted(data.get("results",[]), key=lambda r:r.get("last_updated",""), reverse=True)
          names=[r.get("name","") for r in results if r.get("name")]

          students={"sivan","dvir","sahar","gili"}
          prefix = f"{env}-feature-" if env in students else f"{env}-"

          # pick the newest tag that starts with the expected prefix
          tag = next((n for n in names if n.startswith(prefix)), "")

          # fallback for main if only 'latest' exists
          if not tag and env=="main" and "latest" in names:
              tag="latest"

          print(tag)
          PY

          TAG="$(cat /tmp/tag.txt || true)"
          [ -z "${TAG:-}" ] && TAG="latest"

          echo "IMAGE_TAG=$TAG" >> "$GITHUB_ENV"
          echo "Picked image: ${REPO}:${TAG}"
      # --------------------------------------------------

      - name: Show picked image
        run: |
          echo "Using image: giligalili/guestlistapi:${IMAGE_TAG}"

      - name: Terraform Validate
        run: terraform validate

      # PLAN (manual)
      - name: Terraform Plan
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan' }}
        run: |
          terraform plan -input=false \
            -var="environment=${ENVIRONMENT}" \
            -var="aws_region=${AWS_REGION}" \
            -var="namespace=${NAMESPACE}" \
            -var="image_tag=${IMAGE_TAG}"

      # APPLY path (auto on push main OR manual 'apply')
      - name: Terraform Plan (apply)
        if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') }}
        run: |
          terraform plan -input=false -out="tfplan-${ENVIRONMENT}" \
            -var="environment=${ENVIRONMENT}" \
            -var="aws_region=${AWS_REGION}" \
            -var="namespace=${NAMESPACE}" \
            -var="image_tag=${IMAGE_TAG}"

      - name: Terraform Apply
        if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') }}
        run: terraform apply -input=false "tfplan-${ENVIRONMENT}"

      # DESTROY (manual)
      - name: Terraform Destroy
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy' }}
        run: |
          terraform destroy -auto-approve -input=false \
            -var="environment=${ENVIRONMENT}" \
            -var="aws_region=${AWS_REGION}" \
            -var="namespace=${NAMESPACE}" \
            -var="image_tag=ignore"

      # Optional: show LB URL & health after apply
      - name: Install kubectl
        if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') }}
        uses: azure/setup-kubectl@v4

      - name: Show LB URL and health check
        if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') }}
        run: |
          set -euo pipefail
          # get cluster name output; tolerate missing
          CLUSTER_NAME="$(terraform output -raw cluster_name 2>/dev/null || true)"
          [ -z "$CLUSTER_NAME" ] && CLUSTER_NAME="guestlist-cluster"

          aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "${AWS_REGION}"

          if kubectl -n "${NAMESPACE}" get svc guestlist-service >/dev/null 2>&1; then
            HOST=$(kubectl -n "${NAMESPACE}" get svc guestlist-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          else
            HOST=$(kubectl -n "${NAMESPACE}" get svc -l app=guestlist-api -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
          fi

          if [ -z "${HOST:-}" ]; then
            echo "::warning::Could not resolve LoadBalancer hostname."
            exit 0
          fi

          URL="http://${HOST}:1111/healthz"
          echo "LB URL: ${URL}"
          curl -fsS --max-time 10 "$URL" || true
